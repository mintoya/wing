#ifndef HID_KEY_NAMES_H
#define HID_KEY_NAMES_H

#include "hid_keys.h"
#include "string-List/um_fp.h"
#include <string.h>
#include <stdint.h>
static const uint8_t keyCodes[] = {
    KEY_MOD_LCTRL,
    KEY_MOD_LSHIFT,
    KEY_MOD_LALT,
    KEY_MOD_LMETA,
    KEY_MOD_RCTRL,
    KEY_MOD_RSHIFT,
    KEY_MOD_RALT,
    KEY_MOD_RMETA,
    KEY_NONE,
    KEY_ERR_OVF,
    KEY_A,
    KEY_B,
    KEY_C,
    KEY_D,
    KEY_E,
    KEY_F,
    KEY_G,
    KEY_H,
    KEY_I,
    KEY_J,
    KEY_K,
    KEY_L,
    KEY_M,
    KEY_N,
    KEY_O,
    KEY_P,
    KEY_Q,
    KEY_R,
    KEY_S,
    KEY_T,
    KEY_U,
    KEY_V,
    KEY_W,
    KEY_X,
    KEY_Y,
    KEY_Z,
    KEY_1,
    KEY_2,
    KEY_3,
    KEY_4,
    KEY_5,
    KEY_6,
    KEY_7,
    KEY_8,
    KEY_9,
    KEY_0,
    KEY_ENTER,
    KEY_ESC,
    KEY_BACKSPACE,
    KEY_TAB,
    KEY_SPACE,
    KEY_MINUS,
    KEY_EQUAL,
    KEY_LEFTBRACE,
    KEY_RIGHTBRACE,
    KEY_BACKSLASH,
    KEY_HASHTILDE,
    KEY_SEMICOLON,
    KEY_APOSTROPHE,
    KEY_GRAVE,
    KEY_COMMA,
    KEY_DOT,
    KEY_SLASH,
    KEY_CAPSLOCK,
    KEY_F1,
    KEY_F2,
    KEY_F3,
    KEY_F4,
    KEY_F5,
    KEY_F6,
    KEY_F7,
    KEY_F8,
    KEY_F9,
    KEY_F10,
    KEY_F11,
    KEY_F12,
    KEY_SYSRQ,
    KEY_SCROLLLOCK,
    KEY_PAUSE,
    KEY_INSERT,
    KEY_HOME,
    KEY_PAGEUP,
    KEY_DELETE,
    KEY_END,
    KEY_PAGEDOWN,
    KEY_RIGHT,
    KEY_LEFT,
    KEY_DOWN,
    KEY_UP,
    KEY_NUMLOCK,
    KEY_KPSLASH,
    KEY_KPASTERISK,
    KEY_KPMINUS,
    KEY_KPPLUS,
    KEY_KPENTER,
    KEY_KP1,
    KEY_KP2,
    KEY_KP3,
    KEY_KP4,
    KEY_KP5,
    KEY_KP6,
    KEY_KP7,
    KEY_KP8,
    KEY_KP9,
    KEY_KP0,
    KEY_KPDOT,
    KEY_102ND,
    KEY_COMPOSE,
    KEY_POWER,
    KEY_KPEQUAL,
    KEY_F13,
    KEY_F14,
    KEY_F15,
    KEY_F16,
    KEY_F17,
    KEY_F18,
    KEY_F19,
    KEY_F20,
    KEY_F21,
    KEY_F22,
    KEY_F23,
    KEY_F24,
    KEY_OPEN,
    KEY_HELP,
    KEY_PROPS,
    KEY_FRONT,
    KEY_STOP,
    KEY_AGAIN,
    KEY_UNDO,
    KEY_CUT,
    KEY_COPY,
    KEY_PASTE,
    KEY_FIND,
    KEY_MUTE,
    KEY_VOLUMEUP,
    KEY_VOLUMEDOWN,
    KEY_KPCOMMA,
    KEY_RO,
    KEY_KATAKANAHIRAGANA,
    KEY_YEN,
    KEY_HENKAN,
    KEY_MUHENKAN,
    KEY_KPJPCOMMA,
    KEY_HANGEUL,
    KEY_HANJA,
    KEY_KATAKANA,
    KEY_HIRAGANA,
    KEY_ZENKAKUHANKAKU,
    KEY_KPLEFTPAREN,
    KEY_KPRIGHTPAREN,
    KEY_LEFTCTRL,
    KEY_LEFTSHIFT,
    KEY_LEFTALT,
    KEY_LEFTMETA,
    KEY_RIGHTCTRL,
    KEY_RIGHTSHIFT,
    KEY_RIGHTALT,
    KEY_RIGHTMETA,
    KEY_MEDIA_PLAYPAUSE,
    KEY_MEDIA_STOPCD,
    KEY_MEDIA_PREVIOUSSONG,
    KEY_MEDIA_NEXTSONG,
    KEY_MEDIA_EJECTCD,
    KEY_MEDIA_VOLUMEUP,
    KEY_MEDIA_VOLUMEDOWN,
    KEY_MEDIA_MUTE,
    KEY_MEDIA_WWW,
    KEY_MEDIA_BACK,
    KEY_MEDIA_FORWARD,
    KEY_MEDIA_STOP,
    KEY_MEDIA_FIND,
    KEY_MEDIA_SCROLLUP,
    KEY_MEDIA_SCROLLDOWN,
    KEY_MEDIA_EDIT,
    KEY_MEDIA_SLEEP,
    KEY_MEDIA_COFFEE,
    KEY_MEDIA_REFRESH,
    KEY_MEDIA_CALC,
};
static const char *keyNames[] = {
    "KEY_MOD_LCTRL",
    "KEY_MOD_LSHIFT",
    "KEY_MOD_LALT",
    "KEY_MOD_LMETA",
    "KEY_MOD_RCTRL",
    "KEY_MOD_RSHIFT",
    "KEY_MOD_RALT",
    "KEY_MOD_RMETA",
    "KEY_NONE",
    "KEY_ERR_OVF",
    "KEY_A",
    "KEY_B",
    "KEY_C",
    "KEY_D",
    "KEY_E",
    "KEY_F",
    "KEY_G",
    "KEY_H",
    "KEY_I",
    "KEY_J",
    "KEY_K",
    "KEY_L",
    "KEY_M",
    "KEY_N",
    "KEY_O",
    "KEY_P",
    "KEY_Q",
    "KEY_R",
    "KEY_S",
    "KEY_T",
    "KEY_U",
    "KEY_V",
    "KEY_W",
    "KEY_X",
    "KEY_Y",
    "KEY_Z",
    "KEY_1",
    "KEY_2",
    "KEY_3",
    "KEY_4",
    "KEY_5",
    "KEY_6",
    "KEY_7",
    "KEY_8",
    "KEY_9",
    "KEY_0",
    "KEY_ENTER",
    "KEY_ESC",
    "KEY_BACKSPACE",
    "KEY_TAB",
    "KEY_SPACE",
    "KEY_MINUS",
    "KEY_EQUAL",
    "KEY_LEFTBRACE",
    "KEY_RIGHTBRACE",
    "KEY_BACKSLASH",
    "KEY_HASHTILDE",
    "KEY_SEMICOLON",
    "KEY_APOSTROPHE",
    "KEY_GRAVE",
    "KEY_COMMA",
    "KEY_DOT",
    "KEY_SLASH",
    "KEY_CAPSLOCK",
    "KEY_F1",
    "KEY_F2",
    "KEY_F3",
    "KEY_F4",
    "KEY_F5",
    "KEY_F6",
    "KEY_F7",
    "KEY_F8",
    "KEY_F9",
    "KEY_F10",
    "KEY_F11",
    "KEY_F12",
    "KEY_SYSRQ",
    "KEY_SCROLLLOCK",
    "KEY_PAUSE",
    "KEY_INSERT",
    "KEY_HOME",
    "KEY_PAGEUP",
    "KEY_DELETE",
    "KEY_END",
    "KEY_PAGEDOWN",
    "KEY_RIGHT",
    "KEY_LEFT",
    "KEY_DOWN",
    "KEY_UP",
    "KEY_NUMLOCK",
    "KEY_KPSLASH",
    "KEY_KPASTERISK",
    "KEY_KPMINUS",
    "KEY_KPPLUS",
    "KEY_KPENTER",
    "KEY_KP1",
    "KEY_KP2",
    "KEY_KP3",
    "KEY_KP4",
    "KEY_KP5",
    "KEY_KP6",
    "KEY_KP7",
    "KEY_KP8",
    "KEY_KP9",
    "KEY_KP0",
    "KEY_KPDOT",
    "KEY_102ND",
    "KEY_COMPOSE",
    "KEY_POWER",
    "KEY_KPEQUAL",
    "KEY_F13",
    "KEY_F14",
    "KEY_F15",
    "KEY_F16",
    "KEY_F17",
    "KEY_F18",
    "KEY_F19",
    "KEY_F20",
    "KEY_F21",
    "KEY_F22",
    "KEY_F23",
    "KEY_F24",
    "KEY_OPEN",
    "KEY_HELP",
    "KEY_PROPS",
    "KEY_FRONT",
    "KEY_STOP",
    "KEY_AGAIN",
    "KEY_UNDO",
    "KEY_CUT",
    "KEY_COPY",
    "KEY_PASTE",
    "KEY_FIND",
    "KEY_MUTE",
    "KEY_VOLUMEUP",
    "KEY_VOLUMEDOWN",
    "KEY_KPCOMMA",
    "KEY_RO",
    "KEY_KATAKANAHIRAGANA",
    "KEY_YEN",
    "KEY_HENKAN",
    "KEY_MUHENKAN",
    "KEY_KPJPCOMMA",
    "KEY_HANGEUL",
    "KEY_HANJA",
    "KEY_KATAKANA",
    "KEY_HIRAGANA",
    "KEY_ZENKAKUHANKAKU",
    "KEY_KPLEFTPAREN",
    "KEY_KPRIGHTPAREN",
    "KEY_LEFTCTRL",
    "KEY_LEFTSHIFT",
    "KEY_LEFTALT",
    "KEY_LEFTMETA",
    "KEY_RIGHTCTRL",
    "KEY_RIGHTSHIFT",
    "KEY_RIGHTALT",
    "KEY_RIGHTMETA",
    "KEY_MEDIA_PLAYPAUSE",
    "KEY_MEDIA_STOPCD",
    "KEY_MEDIA_PREVIOUSSONG",
    "KEY_MEDIA_NEXTSONG",
    "KEY_MEDIA_EJECTCD",
    "KEY_MEDIA_VOLUMEUP",
    "KEY_MEDIA_VOLUMEDOWN",
    "KEY_MEDIA_MUTE",
    "KEY_MEDIA_WWW",
    "KEY_MEDIA_BACK",
    "KEY_MEDIA_FORWARD",
    "KEY_MEDIA_STOP",
    "KEY_MEDIA_FIND",
    "KEY_MEDIA_SCROLLUP",
    "KEY_MEDIA_SCROLLDOWN",
    "KEY_MEDIA_EDIT",
    "KEY_MEDIA_SLEEP",
    "KEY_MEDIA_COFFEE",
    "KEY_MEDIA_REFRESH",
    "KEY_MEDIA_CALC",
};

static uint8_t kn_Match(um_fp name) {
    Serial.println("looking for key: ");
    Serial.printf("%.*s\n", (int)name.width, (char*)name.ptr);

    for (unsigned int i = 0; i < sizeof(keyCodes) / sizeof(uint8_t); i++) {
        const char* keyName = keyNames[i]; // array of key names corresponding to keyCodes

        // compare first 'name.width' characters
        if (strncmp((char*)name.ptr, keyName, name.width) == 0
            && keyName[name.width] == '\0') { // ensure exact match length
            return keyCodes[i];
        }
    }

    Serial.println("couldn't find key:");
    Serial.printf("%.*s\n", (int)name.width, (char*)name.ptr);
    return KEY_NONE;
}
#endif
